// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function main(a, b) {
  var distance = /* record */[/* contents */0];
  var dimensions = Math.max(a.length, b.length);
  for(var i = 0; i <= dimensions; ++i){
    var aValue;
    try {
      aValue = Caml_array.caml_array_get(a, i);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
        if (exn[1] === "index out of bounds") {
          aValue = 0;
        } else {
          throw exn;
        }
      } else {
        throw exn;
      }
    }
    var bValue;
    try {
      bValue = Caml_array.caml_array_get(b, i);
    }
    catch (raw_exn$1){
      var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
      if (exn$1[0] === Caml_builtin_exceptions.invalid_argument) {
        if (exn$1[1] === "index out of bounds") {
          bValue = 0;
        } else {
          throw exn$1;
        }
      } else {
        throw exn$1;
      }
    }
    distance[0] = distance[0] + Math.abs(bValue - aValue | 0) | 0;
  }
  return distance;
}

var ManhattanDistance = {
  main: main
};

function main$1(input) {
  var values = input.split("\n");
  console.log(values);
  return /* () */0;
}

var Part1 = {
  getBounds: /* () */0,
  main: main$1
};

var Day03 = {
  Part1: Part1
};

var file = Fs.readFileSync("./input.txt", "utf8");

console.log(main$1("R75,D30,R83,U83,L12,D49,R71,U7,L72\nU62,R66,U55,R34,D71,R55,D58,R83"));

exports.ManhattanDistance = ManhattanDistance;
exports.Day03 = Day03;
exports.file = file;
/* file Not a pure module */
